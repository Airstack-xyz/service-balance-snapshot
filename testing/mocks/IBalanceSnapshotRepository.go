// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/airstack-xyz/service-balance-snapshot/pkg/model"
	mock "github.com/stretchr/testify/mock"

	mongo "go.mongodb.org/mongo-driver/mongo"
)

// IBalanceSnapshotRepository is an autogenerated mock type for the IBalanceSnapshotRepository type
type IBalanceSnapshotRepository struct {
	mock.Mock
}

// BulkWriteSnapshot provides a mock function with given fields: ctx, writeModels
func (_m *IBalanceSnapshotRepository) BulkWriteSnapshot(ctx context.Context, writeModels []mongo.WriteModel) error {
	ret := _m.Called(ctx, writeModels)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []mongo.WriteModel) error); ok {
		r0 = rf(ctx, writeModels)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSnapshot provides a mock function with given fields: ctx, snapshot
func (_m *IBalanceSnapshotRepository) CreateSnapshot(ctx context.Context, snapshot *model.BalanceSnapshot) error {
	ret := _m.Called(ctx, snapshot)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.BalanceSnapshot) error); ok {
		r0 = rf(ctx, snapshot)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindFirstNearestHighSnapshotRecord provides a mock function with given fields: ctx, chainId, owner, tokenId, tokenAddress, blockNumber
func (_m *IBalanceSnapshotRepository) FindFirstNearestHighSnapshotRecord(ctx context.Context, chainId string, owner string, tokenId string, tokenAddress string, blockNumber uint) (*model.BalanceSnapshot, error) {
	ret := _m.Called(ctx, chainId, owner, tokenId, tokenAddress, blockNumber)

	var r0 *model.BalanceSnapshot
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, uint) *model.BalanceSnapshot); ok {
		r0 = rf(ctx, chainId, owner, tokenId, tokenAddress, blockNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.BalanceSnapshot)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, uint) error); ok {
		r1 = rf(ctx, chainId, owner, tokenId, tokenAddress, blockNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSnapshotByBlockNumber provides a mock function with given fields: ctx, chainId, owner, tokenAddress, tokenId, blockNumber
func (_m *IBalanceSnapshotRepository) GetSnapshotByBlockNumber(ctx context.Context, chainId string, owner string, tokenAddress string, tokenId string, blockNumber uint) (*model.BalanceSnapshot, error) {
	ret := _m.Called(ctx, chainId, owner, tokenAddress, tokenId, blockNumber)

	var r0 *model.BalanceSnapshot
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, uint) *model.BalanceSnapshot); ok {
		r0 = rf(ctx, chainId, owner, tokenAddress, tokenId, blockNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.BalanceSnapshot)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, uint) error); ok {
		r1 = rf(ctx, chainId, owner, tokenAddress, tokenId, blockNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSnapshotById provides a mock function with given fields: ctx, id, updateFields
func (_m *IBalanceSnapshotRepository) UpdateSnapshotById(ctx context.Context, id string, updateFields map[string]interface{}) (int64, error) {
	ret := _m.Called(ctx, id, updateFields)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}) int64); ok {
		r0 = rf(ctx, id, updateFields)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]interface{}) error); ok {
		r1 = rf(ctx, id, updateFields)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIBalanceSnapshotRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIBalanceSnapshotRepository creates a new instance of IBalanceSnapshotRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIBalanceSnapshotRepository(t mockConstructorTestingTNewIBalanceSnapshotRepository) *IBalanceSnapshotRepository {
	mock := &IBalanceSnapshotRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
