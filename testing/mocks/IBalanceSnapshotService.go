// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	consumer "github.com/airstack-xyz/kafka/pkg/consumer"

	dto "github.com/airstack-xyz/kafka/pkg/common/dto"

	mock "github.com/stretchr/testify/mock"

	model "github.com/airstack-xyz/service-balance-snapshot/pkg/model"

	producer "github.com/airstack-xyz/kafka/pkg/producer"
)

// IBalanceSnapshotService is an autogenerated mock type for the IBalanceSnapshotService type
type IBalanceSnapshotService struct {
	mock.Mock
}

// GetTokenDataFromTransferEvent provides a mock function with given fields: ctx, transferTokenData
func (_m *IBalanceSnapshotService) GetTokenDataFromTransferEvent(ctx context.Context, transferTokenData *model.TokenTransfer) (*model.Token, bool, error) {
	ret := _m.Called(ctx, transferTokenData)

	var r0 *model.Token
	if rf, ok := ret.Get(0).(func(context.Context, *model.TokenTransfer) *model.Token); ok {
		r0 = rf(ctx, transferTokenData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Token)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(context.Context, *model.TokenTransfer) bool); ok {
		r1 = rf(ctx, transferTokenData)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *model.TokenTransfer) error); ok {
		r2 = rf(ctx, transferTokenData)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProcessKafkaEventTokenTransfer provides a mock function with given fields: ctx, evt, ch
func (_m *IBalanceSnapshotService) ProcessKafkaEventTokenTransfer(ctx context.Context, evt dto.Message, ch chan consumer.ResponseChan) {
	_m.Called(ctx, evt, ch)
}

// SetKafkaReader provides a mock function with given fields: reader
func (_m *IBalanceSnapshotService) SetKafkaReader(reader *consumer.KafkaReader) {
	_m.Called(reader)
}

// SetKafkaWriter provides a mock function with given fields: writer
func (_m *IBalanceSnapshotService) SetKafkaWriter(writer *producer.KafkaWriter) {
	_m.Called(writer)
}

type mockConstructorTestingTNewIBalanceSnapshotService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIBalanceSnapshotService creates a new instance of IBalanceSnapshotService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIBalanceSnapshotService(t mockConstructorTestingTNewIBalanceSnapshotService) *IBalanceSnapshotService {
	mock := &IBalanceSnapshotService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
